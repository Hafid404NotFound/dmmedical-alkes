-- Create activity log table
CREATE TABLE IF NOT EXISTS activity_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    type VARCHAR NOT NULL CHECK (type IN ('product', 'message', 'review')),
    title TEXT NOT NULL,
    entity_id UUID REFERENCES products(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

-- Create function to automatically log activities
CREATE OR REPLACE FUNCTION create_activity_log()
RETURNS TRIGGER AS $$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO activity_logs (type, title, entity_id, user_id)
        VALUES (
            CASE 
                WHEN TG_TABLE_NAME = 'products' THEN 'product'
                WHEN TG_TABLE_NAME = 'messages' THEN 'message'
                WHEN TG_TABLE_NAME = 'reviews' THEN 'review'
            END,
            CASE
                WHEN TG_TABLE_NAME = 'products' THEN NEW.name
                WHEN TG_TABLE_NAME = 'messages' THEN NEW.subject
                WHEN TG_TABLE_NAME = 'reviews' THEN 'Review baru dari ' || NEW.name
            END,
            NEW.id,
            NEW.user_id
        );
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for each table
DROP TRIGGER IF EXISTS log_product_activity ON products;
CREATE TRIGGER log_product_activity
    AFTER INSERT ON products
    FOR EACH ROW
    EXECUTE FUNCTION create_activity_log();

DROP TRIGGER IF EXISTS log_message_activity ON messages;
CREATE TRIGGER log_message_activity
    AFTER INSERT ON messages
    FOR EACH ROW
    EXECUTE FUNCTION create_activity_log();

DROP TRIGGER IF EXISTS log_review_activity ON reviews;
CREATE TRIGGER log_review_activity
    AFTER INSERT ON reviews
    FOR EACH ROW
    EXECUTE FUNCTION create_activity_log();
